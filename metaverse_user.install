<?php

/**
 * @package   metaverse_user
 * @copyright Copyright (C) 2013 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
 * @link      http://www.d4os.org
 * @license   GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
 * metaverse_user is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

/**
 * Implements hook_install
 */
function metaverse_user_install() {
	$t = get_t();
	// add the uuid field to the user
	$field_name = 'field_mu_user_uuid';
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'uuid_field',
      'entity_types' => array('user'),
      'cardinality' => 1,
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  if (!field_info_instance('user', $field_name, 'user')) {
    $instance = array(
      'field_name' => $field_name,
      'bundle' => 'user',
      'entity_type' => 'user',
      'label' => $t('Inworld uuid'),
      'description' => $t('This is the user uuid inworld.'),
      'required' => FALSE,
			'default_value' => array(
				array('00000000-0000-0000-0000-000000000000')
			)
    );
    field_create_instance($instance);
  }

	// defines node type for the terminals
	$machine_name = 'metaverse_user_terminal';
		$defaults = array(
			'type' => $machine_name,
			'name' => 'Metaverse user terminal',
			'base' => 'node_content',
			'title_label' => $t('Name'),
			'description' => $t('Inworld managed terminal. These nodes are automatically generated by the inworld script.'),
			'custom' => TRUE,
		);

		// set other node defaults not declared above
		$content_type = node_type_set_defaults($defaults);

		// add the body field
		node_add_body_field($content_type, $t('Description'));

		// save the content type
		node_type_save($content_type);

		// add peristant variables that control settings
		variable_set('additional_settings__active_tab_' . $machine_name, 'edit-menu');
		variable_set('node_preview_' . $machine_name, 1);
		variable_set('node_options_' . $machine_name, array(0 => 'status'));
		variable_set('node_submitted_' . $machine_name, 0);
		variable_set('menu_options_' . $machine_name, array());
		variable_set('menu_parent_' . $machine_name, 'main-menu:0');

		// create all the fields we are adding to our content type
		foreach (_metaverse_user_installed_fields() as $field) {
			field_create_field($field);
		}

		// create all the instances for our fields
		foreach (_metaverse_user_installed_instances() as $instance) {
			$instance['entity_type'] = 'node';
			$instance['bundle'] = $defaults['type'];
			field_create_instance($instance);
		}
}

function _metaverse_user_installed_fields() {
	return array(
		// terminal_key
		'mu_terminal_key' => array(
			'field_name' => 'field_mu_terminal_key',
			'type' => 'uuid_field',
			'module' => 'uuid_field',
			'active' => 1,
			'locked' => 1,
			'cardinality' => 1,
			'deleted' => 0,
		),
		// terminal_url
		'mu_terminal_url' => array(
			'field_name' => 'field_mu_terminal_url',
			'type' => 'text',
			'module' => 'text',
			'active' => 1,
			'locked' => 1,
			'cardinality' => 1,
			'deleted' => 0,
			'settings' => array(
				'max_length' => 255
			)
		),
		// owner_key
		'mu_terminal_owner_key' => array(
			'field_name' => 'field_mu_terminal_owner_key',
			'type' => 'uuid_field',
			'module' => 'uuid_field',
			'active' => 1,
			'locked' => 1,
			'cardinality' => 1,
			'deleted' => 0,
		),
		// region_name
		'mu_region_name' => array(
			'field_name' => 'field_mu_region_name',
			'type' => 'text',
			'module' => 'text',
			'active' => 1,
			'locked' => 1,
			'cardinality' => 1,
			'deleted' => 0,
			'settings' => array(
				'max_length' => 255
			)
		),
		// terminal_location
		'mu_terminal_location' => array(
			'field_name' => 'field_mu_terminal_location',
			'type' => 'text',
			'module' => 'text',
			'active' => 1,
			'locked' => 1,
			'cardinality' => 1,
			'deleted' => 0,
			'settings' => array(
				'max_length' => 13
			)
		),
		// last_online
		'mu_terminal_last_online' => array(
			'field_name'  => 'field_mu_terminal_last_online',
			'type'        => 'datestamp',
			'module'      => 'date',
			'active'      => 1,
			'locked'      => 1,
			'cardinality' => 1,
			'deleted'     => 0,
			'settings'    => array(
				'granularity'   => Array(
					'month'   => 'month',
					'day'     => 'day',
					'hour'    => 'hour',
					'minute'  => 'minute',
					'year'    => 'year',
					'second'  => 0,
				),
				'tz_handling'   => 'site',
				'timezone_db'   => 'UTC',
				'cache_enabled' => 0,
				'cache_count'   => 4,
				'todate'        => '',
			),
		),
	);
}

function _metaverse_user_installed_instances() {
	return array(
		// terminal key
		'mu_terminal_key' => array(
			'field_name' => 'field_mu_terminal_key',
			'label' => t('Terminal key'),
			'required' => TRUE
		),
		// terminal url
		'mu_terminal_url' => array(
			'field_name' => 'field_mu_terminal_url',
			'label' => t('Terminal url'),
			'required' => TRUE,
			'widget' => array(
				'type' => 'text_textfield',
				'module' => 'text',
			),
			'display' => array(
				'default' => array(
					'type'   => 'hidden'
				),
				'teaser' => array(
					'type'   => 'hidden'
				),
			),
		),
		// owner key
		'mu_terminal_owner_key' => array(
			'field_name' => 'field_mu_terminal_owner_key',
			'label' => t('Owner'),
			'required' => TRUE
		),
		// region name
		'mu_region_name' => array(
			'field_name' => 'field_mu_region_name',
			'label' => t('Region name'),
			'required' => TRUE,
			'widget' => array(
				'type' => 'text_textfield',
				'module' => 'text',
			)
		),
		// terminal location
		'mu_terminal_location' => array(
			'field_name' => 'field_mu_terminal_location',
			'label' => t('Terminal location'),
			'required' => TRUE,
			'widget' => array(
				'type' => 'text_textfield',
				'module' => 'text',
				'settings' => array(
					'size' => 13,
					'max_length' => 13
				)
			)
		),
		// last_online
		'mu_terminal_last_online' => array(
			'field_name'  => 'field_mu_terminal_last_online',
			'label'       => t('Last online'),
			'required'    => FALSE,
			'widget' => array(
				'type'     => 'date_select',
				'module'   => 'date',
				'settings' => array(
					'input_format'  => 'm/d/Y - H:i:s',
					'year_range'    => '0:+3',
					'increment'     => 15,
				),
			),
			'settings' => array(
				'default_value'   => 'now',
				'default_value2'  => 'same',
			),
			'display' => array(
				'default' => array(
					'label'   => 'inline',
					'type'    => 'date_default',
					'module'  => 'date',
				),
			),
		),
	);
}

/**
 * Implements of hook_uninstall().
 */
function metaverse_user_uninstall() {
	$machine_name = 'metaverse_user_terminal';
	// gather all nodes created
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => $machine_name));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}

	// delete all the nodes at once
	node_delete_multiple($nids);

	// remove peristant variables that control settings
	variable_del('additional_settings__active_tab_' . $machine_name);
	variable_del('node_preview_' . $machine_name);
	variable_del('node_options_' . $machine_name);
	variable_del('node_submitted_' . $machine_name);
	variable_del('menu_options_' . $machine_name);
	variable_del('menu_parent_' . $machine_name);


	// find all fields and delete them
	foreach (array_keys(_metaverse_user_installed_fields()) as $field) {
		field_delete_field($field);
	}

	// find all fields and delete instance
	$instances = field_info_instances('node', $machine_name);
	foreach ($instances as $instance_name => $instance) {
		field_delete_instance($instance);
	}

	// delete our content type
	node_type_delete($machine_name);

	// delete the user field and its instance
	field_delete_field('mu_uuid');
	$instance = field_info_instance('user', 'field_mu_uuid', 'user');
	field_delete_instance($instance);

	// purge all field information
	field_purge_batch(1000);

  // Remove variables.
  db_query("DELETE FROM {variable} WHERE name LIKE 'metaverse_user%%'");
}

/**
 * Implements hook_schema().
 */
function metaverse_user_schema() {
  $schema['metaverse_user_validators'] = array(
    'description' => t('The validators uuids for users.'),
    'fields' => array(
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not NULL' => TRUE, 'default' => 0),
      'code' => array(
        'description' => 'The validator uuid.',
        'type' => 'char',
        'length' => 40,
        'not NULL' => TRUE
      ),
    ), // TODO : check indexes
    'primary key' => array('uid'),
  );
  return $schema;
}
